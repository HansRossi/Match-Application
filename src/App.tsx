import { useState } from 'react'
import './App.css'

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface User {
  id: string
  name: string
  age: number
  skills: string[]
  interests: string[]
  bio: string
  photo: string
  lookingFor: string[]
  experience: string
  location: string
  github?: string
  portfolio?: string
}

interface Match {
  id: string
  user: User
  timestamp: Date
  lastMessage?: string
}

// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const mockUsers: User[] = [
  {
    id: '1',
    name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
    age: 24,
    skills: ['Python', 'Django', 'PostgreSQL', 'Docker', 'AWS'],
    interests: ['Machine Learning', 'Data Science', '–°—Ç–∞—Ä—Ç–∞–ø—ã', '–§–∏–Ω—Ç–µ—Ö'],
    bio: 'Senior Python Developer –≤ –Ø–Ω–¥–µ–∫—Å–µ. –°–æ–∑–¥–∞—é ML-–º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –ò—â—É –∫–æ–º–∞–Ω–¥—É –¥–ª—è B2B SaaS –ø—Ä–æ–µ–∫—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.',
    photo: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Python', 'ML', 'Data Science', 'Backend'],
    experience: '3+ –≥–æ–¥–∞',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    github: 'github.com/alex-petrov',
    portfolio: 'alex-petrov.dev'
  },
  {
    id: '2',
    name: '–ú–∞—Ä–∏—è –í–æ—Ä–æ–Ω–æ–≤–∞',
    age: 22,
    skills: ['UI/UX Design', 'Figma', 'Principle', 'After Effects', 'Research'],
    interests: ['Product Design', 'Behavioral Psychology', 'Accessibility', 'Design Systems'],
    bio: 'Product Designer –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤. –•–æ—á—É –∑–∞–ø—É—Å—Ç–∏—Ç—å EdTech –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.',
    photo: 'https://images.unsplash.com/photo-1494790108755-2616b612b190?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['UI/UX', 'Product Design', 'Frontend', 'EdTech'],
    experience: '2+ –≥–æ–¥–∞',
    location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
    portfolio: 'maria-design.com'
  },
  {
    id: '3',
    name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
    age: 28,
    skills: ['React', 'TypeScript', 'Node.js', 'GraphQL', 'Kubernetes'],
    interests: ['Web3', 'Blockchain', 'DeFi', 'Open Source'],
    bio: 'Tech Lead –≤ –ê–≤–∏—Ç–æ. 6+ –ª–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º. –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä –≤ React. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ Web3 –∏ —Å–æ—Ü—Å–µ—Ç–µ–π.',
    photo: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['React', 'TypeScript', 'Web3', 'Blockchain'],
    experience: '6+ –ª–µ—Ç',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    github: 'github.com/dmitry-kozlov'
  },
  {
    id: '4',
    name: '–°–æ—Ñ–∏—è –õ–µ–±–µ–¥–µ–≤–∞',
    age: 20,
    skills: ['Flutter', 'Dart', 'Firebase', 'Swift', 'Kotlin'],
    interests: ['Mobile Development', 'AR/VR', 'HealthTech', 'Indie Games'],
    bio: 'Mobile Developer –≤ VK. –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é cross-platform –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ú–µ—á—Ç–∞—é —Å–æ–∑–¥–∞—Ç—å AR-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ –∑–¥–æ—Ä–æ–≤—å—è.',
    photo: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Flutter', 'Mobile', 'AR/VR', 'HealthTech'],
    experience: '1.5+ –≥–æ–¥–∞',
    location: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, –†–æ—Å—Å–∏—è',
    github: 'github.com/sofia-dev'
  },
  {
    id: '5',
    name: '–ê—Ä—Ç–µ–º –ù–∏–∫–∏—Ç–∏–Ω',
    age: 26,
    skills: ['Go', 'Microservices', 'Kafka', 'Redis', 'Prometheus'],
    interests: ['DevOps', 'Cloud Architecture', 'Performance', 'Monitoring'],
    bio: 'Senior Backend Engineer –≤ Ozon. –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Go. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.',
    photo: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Go', 'Backend', 'DevOps', 'Architecture'],
    experience: '4+ –≥–æ–¥–∞',
    location: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
    github: 'github.com/artem-go'
  },
  {
    id: '6',
    name: '–ê–Ω–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
    age: 23,
    skills: ['Data Science', 'Python', 'TensorFlow', 'SQL', 'Tableau'],
    interests: ['Computer Vision', 'NLP', 'Healthcare AI', 'Ethics in AI'],
    bio: 'Data Scientist –≤ –°–±–µ—Ä–µ. –†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é ML-–º–æ–¥–µ–ª–∏ –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞. –ò—Å—Å–ª–µ–¥—É—é –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ò–ò –≤ –º–µ–¥–∏—Ü–∏–Ω–µ –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.',
    photo: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Data Science', 'ML', 'AI', 'Healthcare'],
    experience: '2+ –≥–æ–¥–∞',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    github: 'github.com/anna-ml'
  },
  {
    id: '7',
    name: '–ú–∞–∫—Å–∏–º –û—Ä–ª–æ–≤',
    age: 25,
    skills: ['Product Management', 'Analytics', 'A/B Testing', 'SQL', 'Figma'],
    interests: ['Growth Hacking', 'User Research', 'Behavioral Economics', 'SaaS'],
    bio: 'Senior Product Manager –≤ –õ–∞–º–æ–¥–µ. –ó–∞–ø—É—Å—Ç–∏–ª 3 –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –Ω—É–ª—è. –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ growth-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –∏ data-driven —Ä–µ—à–µ–Ω–∏—è—Ö. –ò—â—É co-founder –¥–ª—è B2B –ø—Ä–æ–µ–∫—Ç–∞.',
    photo: 'https://images.unsplash.com/photo-1507591064344-4c6ce005b128?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Product Management', 'Growth', 'Analytics', 'B2B SaaS'],
    experience: '3+ –≥–æ–¥–∞',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
  },
  {
    id: '8',
    name: '–ï–ª–µ–Ω–∞ –ö—É–∑–Ω–µ—Ü–æ–≤–∞',
    age: 21,
    skills: ['Marketing', 'SMM', 'Content Strategy', 'SEO', 'Google Ads'],
    interests: ['Digital Marketing', 'Brand Building', 'Psychology', 'Creativity'],
    bio: 'Marketing Lead –≤ GeekBrains. –í—ã—Ä–æ—Å–ª–∞ —Å junior –¥–æ lead –∑–∞ 2 –≥–æ–¥–∞. –ó–∞–ø—É—Å—Ç–∏–ª–∞ 10+ —É—Å–ø–µ—à–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –•–æ—á—É —Å–æ–∑–¥–∞—Ç—å –∞–≥ent—Å—Ç–≤–æ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–æ–≤.',
    photo: 'https://images.unsplash.com/photo-1487412720507-e7ab37603c6f?w=400&h=400&fit=crop&crop=face',
    lookingFor: ['Marketing', 'SMM', 'Brand', 'Creative'],
    experience: '2+ –≥–æ–¥–∞',
    location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è'
  }
]

const skillsOptions = [
  'Python', 'JavaScript', 'Java', 'React', 'Vue.js', 'Angular', 'Node.js',
  'Spring', 'Django', 'Flask', 'Express', 'MongoDB', 'PostgreSQL', 'MySQL',
  'Docker', 'Kubernetes', 'AWS', 'GCP', 'Azure', 'Git', 'Linux',
  'UI/UX', 'Figma', 'Adobe Suite', 'Photoshop', 'Illustrator', 'Sketch',
  'HTML', 'CSS', 'SASS', 'TypeScript', 'C++', 'C#', 'Go', 'Rust', 'Swift',
  'Kotlin', 'Flutter', 'React Native', 'iOS', 'Android', 'Unity', 'Blender',
  'Machine Learning', 'Data Science', 'AI', 'TensorFlow', 'PyTorch',
  'Marketing', 'SMM', 'Content', 'Copywriting', 'Analytics', 'SEO', 'PPC',
  'Project Management', 'Agile', 'Scrum', 'Product Management',
  'English', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–§–∏–∑–∏–∫–∞', '–•–∏–º–∏—è', '–ë–∏–æ–ª–æ–≥–∏—è'
]

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [currentScreen, setCurrentScreen] = useState<'welcome' | 'register' | 'profile' | 'discover' | 'matches' | 'chat' | 'filters'>('welcome')
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [matches, setMatches] = useState<Match[]>([])
  const [currentProfileIndex, setCurrentProfileIndex] = useState(0)
  const [selectedChat, setSelectedChat] = useState<Match | null>(null)
  const [likedProfiles, setLikedProfiles] = useState<string[]>([])
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  const [registrationStep, setRegistrationStep] = useState(1)
  const [formData, setFormData] = useState({
    name: '',
    age: 18,
    skills: [] as string[],
    interests: [] as string[],
    bio: '',
    photo: 'üßë‚Äçüíª',
    lookingFor: [] as string[],
    experience: '',
    location: '',
    github: '',
    portfolio: ''
  })

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –ø–æ–∫–∞–∑–∞
  const availableProfiles = mockUsers.filter(user => 
    user.id !== currentUser?.id && 
    !matches.some(match => match.user.id === user.id)
  )

  const handleRegistration = () => {
    const newUser: User = {
      id: Date.now().toString(),
      ...formData
    }
    setCurrentUser(newUser)
    setCurrentScreen('discover')
  }



  const toggleSkill = (skill: string, type: 'skills' | 'interests' | 'lookingFor') => {
    const current = formData[type]
    if (current.includes(skill)) {
      setFormData({
        ...formData,
        [type]: current.filter(s => s !== skill)
      })
    } else {
      setFormData({
        ...formData,
        [type]: [...current, skill]
      })
    }
  }

  const renderWelcomeScreen = () => (
    <div className="screen welcome-screen">
      <div className="welcome-background">
        <div className="floating-orb orb-1"></div>
        <div className="floating-orb orb-2"></div>
        <div className="floating-orb orb-3"></div>
      </div>
      
      <div className="welcome-content">
        <div className="welcome-header">
          <div className="logo-modern">
            <div className="logo-icon-modern">
              <div className="icon-inner">‚ö°</div>
            </div>
            <div className="logo-text">
              <h1>Match</h1>
              <span className="logo-subtitle">Professional Network</span>
            </div>
          </div>
          <p className="tagline-modern">
            –ú–µ—Å—Ç–æ –≥–¥–µ <span className="highlight">—Ç–∞–ª–∞–Ω—Ç—ã</span> –Ω–∞—Ö–æ–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
          </p>
        </div>

        <div className="stats-preview">
          <div className="stat-preview">
            <span className="stat-number-big">2.5K+</span>
            <span className="stat-label-big">–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</span>
          </div>
          <div className="stat-preview">
            <span className="stat-number-big">450+</span>
            <span className="stat-label-big">–£—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤</span>
          </div>
          <div className="stat-preview">
            <span className="stat-number-big">95%</span>
            <span className="stat-label-big">–£—Ä–æ–≤–µ–Ω—å satisfaction</span>
          </div>
        </div>

        <div className="feature-cards-modern">
          <div className="feature-card-modern">
            <div className="feature-icon-modern gradient-purple">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
              </svg>
            </div>
            <h3>–ù–∞–π–¥–∏ dream team</h3>
            <p>–ü–æ–¥–∫–ª—é—á–∞–π—Å—è –∫ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞–º –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã—Ö –∏–¥–µ–π</p>
          </div>
          <div className="feature-card-modern">
            <div className="feature-icon-modern gradient-blue">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M9.5 3A6.5 6.5 0 0 1 16 9.5c0 1.61-.59 3.09-1.56 4.23l.27.27h.79l5 5-1.5 1.5-5-5v-.79l-.27-.27A6.516 6.516 0 0 1 9.5 16 6.5 6.5 0 0 1 3 9.5 6.5 6.5 0 0 1 9.5 3m0 2C7 5 5 7 5 9.5S7 14 9.5 14 14 12 14 9.5 12 5 9.5 5z"/>
              </svg>
            </div>
            <h3>Smart matching</h3>
            <p>–ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≤—ã–∫–æ–≤ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤</p>
          </div>
          <div className="feature-card-modern">
            <div className="feature-icon-modern gradient-green">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12,18.5L10.5,17H7V15H10.5L12,13.5L13.5,15H17V17H13.5L12,18.5M12,6L10.5,7.5H7V9.5H10.5L12,11L13.5,9.5H17V7.5H13.5L12,6M12,2L15.09,8.26L22,9L17,14L18.18,21L12,17.77L5.82,21L7,14L2,9L8.91,8.26L12,2Z"/>
              </svg>
            </div>
            <h3>–°–æ–∑–¥–∞–≤–∞–π –±—É–¥—É—â–µ–µ</h3>
            <p>–û—Ç –∏–¥–µ–∏ –¥–æ MVP –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å —Å –∫–æ–º–∞–Ω–¥–æ–π –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤</p>
          </div>
        </div>

        <div className="social-proof">
          <div className="avatars-stack">
            <div className="avatar-circle">üë®‚Äçüíª</div>
            <div className="avatar-circle">üë©‚Äçüé®</div>
            <div className="avatar-circle">üë®‚Äçüíº</div>
            <div className="avatar-circle">üë©‚Äçüíª</div>
          </div>
          <p className="social-text">
            <strong>2,500+ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤</strong> —É–∂–µ —Å–æ–∑–¥–∞—é—Ç –ø—Ä–æ–µ–∫—Ç—ã –≤–º–µ—Å—Ç–µ
          </p>
        </div>

        <div className="welcome-actions-modern">
          <button className="cta-button-modern" onClick={() => setCurrentScreen('register')}>
            <span className="button-text">–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É</span>
            <div className="button-arrow">‚Üí</div>
          </button>
          <p className="terms-note">
            –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –Ω–∞–≤—Å–µ–≥–¥–∞ ‚Ä¢ –î–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ 13+
          </p>
        </div>
      </div>
    </div>
  )

  const renderRegistrationScreen = () => (
    <div className="screen registration-screen">
      <div className="reg-header">
        <button className="back-button" onClick={() => setCurrentScreen('welcome')}>
          ‚Üê –ù–∞–∑–∞–¥
        </button>
        <div className="progress-bar">
          <div className="progress-fill" style={{width: `${(registrationStep / 4) * 100}%`}}></div>
        </div>
        <span className="step-counter">{registrationStep}/4</span>
      </div>

      {registrationStep === 1 && (
        <div className="reg-step">
          <h2>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ</h2>
          <div className="form-group">
            <label>–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?</label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData({...formData, name: e.target.value})}
              placeholder="–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è"
              className="text-input"
            />
          </div>
          <div className="form-group">
            <label>–í–æ–∑—Ä–∞—Å—Ç</label>
            <input
              type="number"
              value={formData.age}
              onChange={(e) => setFormData({...formData, age: parseInt(e.target.value)})}
              min="13"
              max="100"
              className="number-input"
            />
          </div>
          <div className="form-group">
            <label>–ì–æ—Ä–æ–¥</label>
            <input
              type="text"
              value={formData.location}
              onChange={(e) => setFormData({...formData, location: e.target.value})}
              placeholder="–ú–æ—Å–∫–≤–∞"
              className="text-input"
            />
          </div>
          <div className="form-group">
            <label>–í—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä</label>
            <div className="avatar-grid">
              {['üßë‚Äçüíª', 'üë©‚Äçüíª', 'üé®', 'üìä', 'üî¨', 'üì±', '‚òï', '‚ú®', 'üöÄ', 'üí°', 'üéØ', '‚ö°'].map(emoji => (
                <button
                  key={emoji}
                  className={`avatar-option ${formData.photo === emoji ? 'selected' : ''}`}
                  onClick={() => setFormData({...formData, photo: emoji})}
                >
                  {emoji}
                </button>
              ))}
            </div>
          </div>
        </div>
      )}

      {registrationStep === 2 && (
        <div className="reg-step">
          <h2>–¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏</h2>
          <p>–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ç—ã —É–º–µ–µ—à—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)</p>
          <div className="skills-grid">
            {skillsOptions.map(skill => (
              <button
                key={skill}
                className={`skill-chip ${formData.skills.includes(skill) ? 'selected' : ''}`}
                onClick={() => toggleSkill(skill, 'skills')}
              >
                {skill}
              </button>
            ))}
          </div>
        </div>
      )}

      {registrationStep === 3 && (
        <div className="reg-step">
          <h2>–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?</h2>
          <p>–í—ã–±–µ—Ä–∏ —Å—Ñ–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è</p>
          <div className="skills-grid">
            {skillsOptions.map(skill => (
              <button
                key={skill}
                className={`skill-chip ${formData.lookingFor.includes(skill) ? 'selected' : ''}`}
                onClick={() => toggleSkill(skill, 'lookingFor')}
              >
                {skill}
              </button>
            ))}
          </div>
        </div>
      )}

      {registrationStep === 4 && (
        <div className="reg-step">
          <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏</h2>
          <div className="form-group">
            <label>–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ</label>
            <textarea
              value={formData.bio}
              onChange={(e) => setFormData({...formData, bio: e.target.value})}
              placeholder="–ö—Ç–æ —Ç—ã, —á–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å..."
              className="textarea-input"
              rows={4}
            />
          </div>
          <div className="form-group">
            <label>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</label>
            <select
              value={formData.experience}
              onChange={(e) => setFormData({...formData, experience: e.target.value})}
              className="select-input"
            >
              <option value="">–í—ã–±–µ—Ä–∏ –æ–ø—ã—Ç</option>
              <option value="–ù–æ–≤–∏—á–æ–∫">–ù–æ–≤–∏—á–æ–∫</option>
              <option value="6 –º–µ—Å—è—Ü–µ–≤">6 –º–µ—Å—è—Ü–µ–≤</option>
              <option value="1 –≥–æ–¥">1 –≥–æ–¥</option>
              <option value="2 –≥–æ–¥–∞">2 –≥–æ–¥–∞</option>
              <option value="3+ –≥–æ–¥–∞">3+ –≥–æ–¥–∞</option>
              <option value="5+ –ª–µ—Ç">5+ –ª–µ—Ç</option>
            </select>
          </div>
          <div className="form-group">
            <label>GitHub (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</label>
            <input
              type="text"
              value={formData.github}
              onChange={(e) => setFormData({...formData, github: e.target.value})}
              placeholder="github.com/username"
              className="text-input"
            />
          </div>
        </div>
      )}

      <div className="reg-actions">
        {registrationStep > 1 && (
          <button 
            className="secondary-button" 
            onClick={() => setRegistrationStep(registrationStep - 1)}
          >
            –ù–∞–∑–∞–¥
          </button>
        )}
        {registrationStep < 4 ? (
          <button 
            className="primary-button"
            onClick={() => setRegistrationStep(registrationStep + 1)}
            disabled={registrationStep === 1 && !formData.name}
          >
            –î–∞–ª–µ–µ
          </button>
        ) : (
          <button 
            className="primary-button"
            onClick={handleRegistration}
            disabled={!formData.bio || !formData.experience}
          >
            –ì–æ—Ç–æ–≤–æ! üöÄ
          </button>
        )}
      </div>
    </div>
  )

  // –°–∏—Å—Ç–µ–º–∞ —Å–≤–∞–π–ø–æ–≤
  const [swipeData, setSwipeData] = useState({
    startX: 0,
    currentX: 0,
    isDragging: false,
    direction: ''
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è flip –∫–∞—Ä—Ç–æ—á–µ–∫
  const [isCardFlipped, setIsCardFlipped] = useState(false)

  const handleTouchStart = (e: React.TouchEvent) => {
    setSwipeData({
      ...swipeData,
      startX: e.touches[0].clientX,
      currentX: e.touches[0].clientX,
      isDragging: true
    })
  }

  const handleTouchMove = (e: React.TouchEvent) => {
    if (!swipeData.isDragging) return
    
    const currentX = e.touches[0].clientX
    const diffX = currentX - swipeData.startX
    
    setSwipeData({
      ...swipeData,
      currentX,
      direction: Math.abs(diffX) > 50 ? (diffX > 0 ? 'right' : 'left') : ''
    })
  }

  const handleTouchEnd = () => {
    if (!swipeData.isDragging) return
    
    const diffX = swipeData.currentX - swipeData.startX
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è —Å–≤–∞–π–ø–∞ –¥–æ 150px –¥–ª—è –±–æ–ª–µ–µ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ —Å–≤–∞–π–ø–∞
    if (Math.abs(diffX) > 150) {
      if (diffX > 0) {
        likeProfile()
      } else {
        skipProfile()
      }
    }
    
    setSwipeData({
      startX: 0,
      currentX: 0,
      isDragging: false,
      direction: ''
    })
  }

  const likeProfile = () => {
    const profile = availableProfiles[currentProfileIndex]
    if (profile) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–∞–π–∫–Ω—É—Ç—ã–µ
      setLikedProfiles([...likedProfiles, profile.id])
      
      // –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç—á (30% —à–∞–Ω—Å)
      if (Math.random() > 0.7) {
        setMatches([...matches, {
          id: `match-${Date.now()}`,
          user: profile,
          timestamp: new Date(),
          lastMessage: '–ù–æ–≤—ã–π –º–∞—Ç—á! –ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º üí´'
        }])
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ
        setTimeout(() => {
          alert('üéâ IT\'S A MATCH! üéâ')
        }, 300)
      }
      
      setCurrentProfileIndex(currentProfileIndex + 1)
    }
  }

  const skipProfile = () => {
    setCurrentProfileIndex(currentProfileIndex + 1)
  }

  const renderDiscoverScreen = () => {
    const currentProfile = availableProfiles[currentProfileIndex]
    
    if (!currentProfile) {
      return (
        <div className="screen discover-screen">
          <div className="empty-state">
            <div className="empty-icon">üéâ</div>
            <h2>–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã!</h2>
            <p>–ù–æ–≤—ã–µ —Ç–∞–ª–∞–Ω—Ç–ª–∏–≤—ã–µ –ª—é–¥–∏ –ø–æ—è–≤—è—Ç—Å—è —Å–∫–æ—Ä–æ</p>
            <button className="primary-button" onClick={() => setCurrentScreen('matches')}>
              –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            </button>
          </div>
        </div>
      )
    }

    return (
      <div className="screen discover-screen">
        <div className="discover-header">
          <div className="header-title">
            <h2>Discover</h2>
            <p>–ù–∞–π–¥–∏ —Å–≤–æ—é dream team</p>
          </div>
          <div className="profile-counter">
            {currentProfileIndex + 1} –∏–∑ {availableProfiles.length}
          </div>
        </div>

        <div className="profile-card-stack">
          {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–∑–∞–¥–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å—Ç–µ–∫–∞ */}
          {availableProfiles.slice(currentProfileIndex + 1, currentProfileIndex + 3).map((profile, index) => (
            <div 
              key={profile.id} 
              className={`profile-card stack-card stack-${index + 1}`}
              style={{zIndex: 10 - index}}
            >
              <div className="profile-photo-container">
                <img 
                  src={profile.photo} 
                  alt={profile.name}
                  className="profile-photo-img"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%236366F1"/><text x="50" y="55" text-anchor="middle" fill="white" font-size="40">üë§</text></svg>'
                  }}
                />
              </div>
            </div>
          ))}
          
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —Å —Å–≤–∞–π–ø–∞–º–∏ –∏ —Ñ–ª–∏–ø–æ–º */}
          <div 
            className={`profile-card main-card ${swipeData.isDragging ? 'swiping' : ''} ${isCardFlipped ? 'flipped' : ''}`}
            style={{
              transform: swipeData.isDragging 
                ? `translateX(${swipeData.currentX - swipeData.startX}px) rotate(${Math.min(15, Math.max(-15, (swipeData.currentX - swipeData.startX) / 15))}deg)`
                : 'none',
              opacity: swipeData.isDragging 
                ? Math.max(0.7, 1 - Math.abs(swipeData.currentX - swipeData.startX) / 300)
                : 1
            }}
            onTouchStart={handleTouchStart}
            onTouchMove={handleTouchMove}
            onTouchEnd={handleTouchEnd}
            onClick={() => {
              // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å–≤–∞–π–ø–∞–µ–º
              if (!swipeData.isDragging && Math.abs(swipeData.currentX - swipeData.startX) < 10) {
                setIsCardFlipped(!isCardFlipped)
              }
            }}
          >
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å–≤–∞–π–ø–∞ */}
            {swipeData.direction && (
              <>
                <div className={`swipe-indicator like ${swipeData.direction === 'right' ? 'show' : ''}`}>
                  LIKE
                </div>
                <div className={`swipe-indicator nope ${swipeData.direction === 'left' ? 'show' : ''}`}>
                  NOPE
                </div>
              </>
            )}
            
            {/* –õ–∏—Ü–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="card-front">
              <div className="profile-photo-container">
                <img 
                  src={currentProfile.photo} 
                  alt={currentProfile.name}
                  className="profile-photo-img"
                />
              </div>
              
              <div className="card-info">
                <div className="main-info">
                  <h2 className="name">{currentProfile.name}</h2>
                  <div className="age-location">
                    <span className="age">{currentProfile.age} –ª–µ—Ç</span>
                    <span className="location">üìç {currentProfile.location}</span>
                  </div>
                </div>
                
                <div className="interests-preview">
                  {currentProfile.skills.slice(0, 3).map(skill => (
                    <span key={skill} className="skill-bubble">{skill}</span>
                  ))}
                  {currentProfile.skills.length > 3 && (
                    <span className="more-skills">+{currentProfile.skills.length - 3}</span>
                  )}
                </div>
                
                <div className="tap-hint">
                  <span>üëÜ –ù–∞–∂–º–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π</span>
                </div>
              </div>
            </div>
            
            {/* –û–±—Ä–∞—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
            <div className="card-back">
              <div className="detailed-info">
                <div className="back-header">
                  <h3>{currentProfile.name}</h3>
                  <button 
                    className="flip-back-btn"
                    onClick={(e) => {
                      e.stopPropagation()
                      setIsCardFlipped(false)
                    }}
                  >
                    ‚úï
                  </button>
                </div>
                
                <div className="bio-section">
                  <h4>–û —Å–µ–±–µ</h4>
                  <p>{currentProfile.bio}</p>
                </div>
                
                <div className="skills-section">
                  <h4>–ù–∞–≤—ã–∫–∏</h4>
                  <div className="skills-grid">
                    {currentProfile.skills.map(skill => (
                      <span key={skill} className="skill-tag-detailed">{skill}</span>
                    ))}
                  </div>
                </div>
                
                <div className="experience-section">
                  <h4>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</h4>
                  <span className="experience-badge">{currentProfile.experience}</span>
                </div>
                
                {(currentProfile.github || currentProfile.portfolio) && (
                  <div className="links-section">
                    <h4>–°—Å—ã–ª–∫–∏</h4>
                    <div className="links">
                      {currentProfile.github && (
                        <a href={`https://${currentProfile.github}`} className="link-btn github">
                          ÔøΩ GitHub
                        </a>
                      )}
                      {currentProfile.portfolio && (
                        <a href={`https://${currentProfile.portfolio}`} className="link-btn portfolio">
                          üåê –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                        </a>
                      )}
                    </div>
                  </div>
                )}
              </div>
            </div>
            
            <div className="profile-content">
              <div className="profile-header">
                <div className="name-section">
                  <h3>{currentProfile.name.split(' ')[0]}</h3>
                  <div className="experience-badge">{currentProfile.experience}</div>
                </div>
                <div className="profile-actions-mini">
                  <button className="mini-action info">‚ÑπÔ∏è</button>
                  {currentProfile.github && (
                    <button className="mini-action github">üíª</button>
                  )}
                </div>
              </div>

              <div className="profile-bio">
                <p>{currentProfile.bio}</p>
              </div>

              <div className="skills-section">
                <div className="section-header">
                  <h4>üí™ –≠–∫—Å–ø–µ—Ä—Ç–∏–∑–∞</h4>
                </div>
                <div className="skills-grid-modern">
                  {currentProfile.skills.slice(0, 4).map((skill, index) => (
                    <div key={skill} className={`skill-pill skill-${index}`}>
                      <span className="skill-text">{skill}</span>
                    </div>
                  ))}
                  {currentProfile.skills.length > 4 && (
                    <div className="skill-pill more-skills">
                      +{currentProfile.skills.length - 4}
                    </div>
                  )}
                </div>
              </div>

              <div className="interests-section">
                <div className="section-header">
                  <h4>üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã</h4>
                </div>
                <div className="interests-grid">
                  {currentProfile.lookingFor.slice(0, 3).map(interest => (
                    <span key={interest} className="interest-pill">{interest}</span>
                  ))}
                </div>
              </div>

              <div className="profile-stats">
                <div className="stat-item">
                  <span className="stat-number">12</span>
                  <span className="stat-label">–ü—Ä–æ–µ–∫—Ç–æ–≤</span>
                </div>
                <div className="stat-item">
                  <span className="stat-number">4.9</span>
                  <span className="stat-label">–†–µ–π—Ç–∏–Ω–≥</span>
                </div>
                <div className="stat-item">
                  <span className="stat-number">89%</span>
                  <span className="stat-label">Match rate</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div className="discover-actions-modern">
          <button className="action-button pass-button-modern" onClick={skipProfile}>
            <div className="button-icon">‚úï</div>
            <div className="button-label">Pass</div>
          </button>
          
          <button className="action-button superlike-button" onClick={likeProfile}>
            <div className="button-icon">‚≠ê</div>
            <div className="button-label">Super</div>
          </button>
          
          <button className="action-button like-button-modern" onClick={likeProfile}>
            <div className="button-icon">‚ö°</div>
            <div className="button-label">Like</div>
          </button>
        </div>
      </div>
    )
  }

  const renderMatchesScreen = () => (
    <div className="screen matches-screen">
      <div className="matches-header">
        <h2>–¢–≤–æ–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è</h2>
        <div className="matches-count">{matches.length} matches</div>
      </div>

      {matches.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">üí´</div>
          <h3>–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</h3>
          <p>–ü—Ä–æ–¥–æ–ª–∂–∞–π –∏—Å–∫–∞—Ç—å - —Ç–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ –±–ª–∏–∑–∫–æ!</p>
          <button className="primary-button" onClick={() => setCurrentScreen('discover')}>
            –ò—Å–∫–∞—Ç—å –¥–∞–ª—å—à–µ
          </button>
        </div>
      ) : (
        <div className="matches-grid">
          {matches.map(match => (
            <div 
              key={match.id} 
              className="match-card"
              onClick={() => {
                setSelectedChat(match)
                setCurrentScreen('chat')
              }}
            >
              <div className="match-photo">{match.user.photo}</div>
              <div className="match-info">
                <h4>{match.user.name}</h4>
                <p>{match.user.skills.slice(0, 2).join(', ')}</p>
                <span className="match-time">
                  {match.timestamp.toLocaleDateString()}
                </span>
              </div>
              <div className="match-indicator">ÔøΩ</div>
            </div>
          ))}
        </div>
      )}
    </div>
  )

  interface ChatMessage {
    id: number
    text: string
    sender: string
    timestamp: Date
  }

  const [chatMessages, setChatMessages] = useState<{[key: string]: ChatMessage[]}>({})
  const [newMessage, setNewMessage] = useState('')

  const renderChatScreen = () => {
    if (!selectedChat) return null

    const chatId = selectedChat.id
    const messages = chatMessages[chatId] || [
      {
        id: 1,
        text: `–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–¥–µ–ª —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ ${currentUser?.skills[0]}, –∫—Ä—É—Ç–æ! üöÄ`,
        sender: selectedChat.user.name,
        timestamp: new Date()
      }
    ]

    const sendMessage = () => {
      if (newMessage.trim()) {
        const newMsg = {
          id: messages.length + 1,
          text: newMessage,
          sender: currentUser?.name || '–í—ã',
          timestamp: new Date()
        }
        setChatMessages({
          ...chatMessages,
          [chatId]: [...messages, newMsg]
        })
        setNewMessage('')
      }
    }

    return (
      <div className="screen chat-screen">
        <div className="chat-header">
          <button 
            className="back-button" 
            onClick={() => setCurrentScreen('matches')}
          >
            ‚Üê
          </button>
          <div className="chat-user-info">
            <div className="chat-avatar">
              <img src={selectedChat.user.photo} alt={selectedChat.user.name} />
            </div>
            <div>
              <h3>{selectedChat.user.name}</h3>
              <p>–æ–Ω–ª–∞–π–Ω ‚Ä¢ {selectedChat.user.location}</p>
            </div>
          </div>
          <button className="chat-options">‚ãÆ</button>
        </div>

        <div className="chat-messages">
          {messages.map(message => (
            <div 
              key={message.id} 
              className={`message ${message.sender === currentUser?.name ? 'sent' : 'received'}`}
            >
              <p>{message.text}</p>
              <div className="message-footer">
                <span className="message-time">
                  {message.timestamp.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                </span>
                {message.sender === currentUser?.name && (
                  <span className="message-status">‚úì‚úì</span>
                )}
              </div>
            </div>
          ))}
          
          {/* Typing indicator –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞ */}
          {messages.length > 0 && messages.length % 3 === 0 && (
            <div className="typing-indicator">
              <div className="typing-dot"></div>
              <div className="typing-dot"></div>
              <div className="typing-dot"></div>
            </div>
          )}
        </div>

        <div className="chat-input">
          <button className="attachment-button" title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª">
            üìé
          </button>
          <input
            type="text"
            value={newMessage}
            onChange={(e) => setNewMessage(e.target.value)}
            placeholder="–°–æ–æ–±—â–µ–Ω–∏–µ..."
            onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
            className="message-input"
          />
          {newMessage.trim() ? (
            <button className="send-button" onClick={sendMessage} title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å">
              ‚úàÔ∏è
            </button>
          ) : (
            <button className="voice-button" title="–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ">
              üé§
            </button>
          )}
        </div>
      </div>
    )
  }

  const renderProfileScreen = () => (
    <div className="screen profile-screen">
      <div className="profile-header">
        <h2>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h2>
      </div>
      
      <div className="user-profile-card">
        <div className="user-photo">
          <img src={currentUser?.photo} alt={currentUser?.name} />
        </div>
        <h3>{currentUser?.name}, {currentUser?.age}</h3>
        <p className="user-location">üìç {currentUser?.location}</p>
        <p className="user-bio">{currentUser?.bio}</p>
        
        <div className="profile-stats">
          <div className="profile-stat">
            <span className="profile-stat-number">47</span>
            <span className="profile-stat-label">–ú–∞—Ç—á–µ–π</span>
          </div>
          <div className="profile-stat">
            <span className="profile-stat-number">12</span>
            <span className="profile-stat-label">–í—Å—Ç—Ä–µ—á</span>
          </div>
          <div className="profile-stat">
            <span className="profile-stat-number">156</span>
            <span className="profile-stat-label">–°–≤—è–∑–µ–π</span>
          </div>
        </div>
        
        <div className="user-skills-section">
          <h4>–ù–∞–≤—ã–∫–∏ –∏ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞</h4>
          <div className="skills-list">
            {currentUser?.skills.map(skill => (
              <span key={skill} className="skill-tag user-skill">{skill}</span>
            ))}
          </div>
        </div>

        <div className="user-interests-section">
          <h4>–ò–Ω—Ç–µ—Ä–µ—Å—ã:</h4>
          <div className="skills-list">
            {currentUser?.lookingFor.map(interest => (
              <span key={interest} className="interest-tag">{interest}</span>
            ))}
          </div>
        </div>
      </div>

      <button 
        className="secondary-button" 
        onClick={() => setCurrentScreen('welcome')}
        style={{marginTop: '20px'}}
      >
        –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
      </button>
    </div>
  )

  return (
    <div className="app">
      {currentScreen === 'welcome' && renderWelcomeScreen()}
      {currentScreen === 'register' && renderRegistrationScreen()}
      {currentScreen === 'discover' && renderDiscoverScreen()}
      {currentScreen === 'matches' && renderMatchesScreen()}
      {currentScreen === 'chat' && renderChatScreen()}
      {currentScreen === 'profile' && renderProfileScreen()}

      {currentUser && currentScreen !== 'register' && currentScreen !== 'welcome' && (
        <div className="bottom-navigation">
          <button 
            className={`nav-button ${currentScreen === 'discover' ? 'active' : ''}`}
            onClick={() => setCurrentScreen('discover')}
          >
            <span className="nav-icon">üîç</span>
            <span className="nav-label">–ü–æ–∏—Å–∫</span>
          </button>
          <button 
            className={`nav-button ${currentScreen === 'matches' ? 'active' : ''}`}
            onClick={() => setCurrentScreen('matches')}
          >
            <span className="nav-icon">‚ö°</span>
            <span className="nav-label">Matches</span>
            {matches.length > 0 && <span className="nav-badge">{matches.length}</span>}
          </button>
          <button 
            className={`nav-button ${currentScreen === 'profile' ? 'active' : ''}`}
            onClick={() => setCurrentScreen('profile')}
          >
            <span className="nav-icon">üë§</span>
            <span className="nav-label">–ü—Ä–æ—Ñ–∏–ª—å</span>
          </button>
        </div>
      )}
    </div>
  )
}

export default App